// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Car {
  id                Int       @id @default(autoincrement())
  manufacturer      String
  model             String
  type              String
  numberOfSeats     Int       @map("number_of_seats")
  numberOfSuitcases Int       @map("number_of_suitcases")
  fuelType          String    @map("fuel_type")
  clutchType        String    @map("clutch_type")
  priceForOneDay    Float     @map("price_for_one_day")
  isAvailable       Boolean   @map("is_available")
  bookings          Booking[]

  @@map("cars")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  isAdmin   Boolean   @default(false)
  bookings  Booking[]
  tokens    Token[]

  @@map("users")
}

model Booking {
  id            Int               @id @default(autoincrement())
  carId         Int
  userId        Int
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  car           Car               @relation(fields: [carId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  protection    Protection?
  extras        ExtraOnBookings[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("bookings")
}

model ProtectionPlan {
  id          Int          @id @default(autoincrement())
  name        String
  price       Float
  description String
  protections Protection[]

  @@map("protection_plans")
}

model Protection {
  id              Int            @id @default(autoincrement())
  bookingId       Int            @unique
  protectionPlanId Int
  booking         Booking        @relation(fields: [bookingId], references: [id])
  protectionPlan  ProtectionPlan @relation(fields: [protectionPlanId], references: [id])

  @@map("protections")
}

model Extra {
  id              Int               @id @default(autoincrement())
  name            String
  price           Float
  description     String
  bookings        ExtraOnBookings[]

  @@map("extras")
}

model ExtraOnBookings {
  bookingId   Int
  extraId     Int
  booking     Booking  @relation(fields: [bookingId], references: [id])
  extra       Extra    @relation(fields: [extraId], references: [id])

  @@id([bookingId, extraId])
  @@map("extra_on_bookings")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime @updatedAt

  @@map("tokens")
}
